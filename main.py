import streamlit as st
import numpy as np
import joblib
from pathlib import Path

# =============== PAGE LAYOUT ===============
st.set_page_config(page_title="D·ª± ƒëo√°n k·∫øt qu·∫£ h·ªçc t·∫≠p", layout="wide")
st.markdown("""
    <style>
      .block-container { padding-left: 2rem; padding-right: 2rem; }
      .field-error { color: #d32f2f; font-size: 0.85rem; margin-top: 0.25rem; }
      .label-error { color: #d32f2f !important; font-weight: 600; }
      .caption-tight { margin-bottom: 0.25rem !important; }
    </style>
""", unsafe_allow_html=True)

st.title("üéì D·ª∞ ƒêO√ÅN K·∫æT QU·∫¢ H·ªåC T·∫¨P SINH VI√äN")

# =============== HELPERS ===============
@st.cache_resource
def load_model(path: str):
    path_obj = Path(path)
    if not path_obj.exists():
        raise FileNotFoundError(f"Model kh√¥ng t√¨m th·∫•y: {path}")
    return joblib.load(path_obj)

def build_feature_vector(gpa_list, tc_list):
    features = []
    for gpa, tc in zip(gpa_list, tc_list):
        features.append(gpa)
        features.append(tc)
    return np.array(features).reshape(1, -1)

def parse_gpa(raw: str):
    try:
        if raw.strip() == "":
            return None, "Ch∆∞a nh·∫≠p"
        v = float(raw)
        if not (0.0 <= v <= 4.0):
            return None, "GPA ph·∫£i n·∫±m trong kho·∫£ng 0.00 ƒë·∫øn 4.00"
        return v, None
    except ValueError:
        return None, "GPA kh√¥ng ph·∫£i l√† s·ªë h·ª£p l·ªá"

def parse_tc(raw: str):
    try:
        if raw.strip() == "":
            return None, "Ch∆∞a nh·∫≠p"
        v = int(raw)
        if v < 0:
            return None, "T√≠n ch·ªâ ph·∫£i l√† s·ªë nguy√™n kh√¥ng √¢m"
        return v, None
    except ValueError:
        return None, "T√≠n ch·ªâ kh√¥ng ph·∫£i l√† s·ªë nguy√™n h·ª£p l·ªá"

# =============== SIDEBAR ===============
st.sidebar.subheader("C√†i ƒë·∫∑t ƒë·∫ßu v√†o")

student_type = st.sidebar.selectbox("ƒê·ªãnh h∆∞·ªõng sinh vi√™n", ("C·ª≠ nh√¢n", "K·ªπ s∆∞"))
max_semester = 6 if student_type == "C·ª≠ nh√¢n" else 8
current_semester = st.sidebar.selectbox("K·ª≥ ƒë√£ h·ªçc", list(range(1, max_semester + 1)))

st.sidebar.divider()
st.sidebar.markdown(
    """
**H∆∞·ªõng d·∫´n nhanh**
- Ch·ªçn *ƒê·ªãnh h∆∞·ªõng sinh vi√™n* v√† *K·ª≥ ƒë√£ h·ªçc* ·ªü tr√™n.
- Nh·∫≠p **GPA** v√† **T√≠n ch·ªâ** cho t·ª´ng k·ª≥ ƒë√£ h·ªçc.
- Nh·∫•n **D·ª± ƒëo√°n** ƒë·ªÉ xem *CPA t·ªët nghi·ªáp* v√† *GPA k·ª≥ k·∫ø ti·∫øp* (n·∫øu c√≤n k·ª≥).

> L∆∞u √Ω: GPA trong kho·∫£ng **0.00‚Äì4.00**, T√≠n ch·ªâ l√† **s·ªë nguy√™n kh√¥ng √¢m**.
    """
)

# =============== FORM (GRID, VALIDATE) ===============
# D√πng text_input ƒë·ªÉ ph√¢n bi·ªát 'ch∆∞a nh·∫≠p' vs '0'
with st.form("input_form"):
    st.subheader("Nh·∫≠p GPA v√† t√≠n ch·ªâ t·ª´ng k·ª≥ (b·∫Øt bu·ªôc)")

    n_cols = 4 if current_semester >= 6 else 3
    gpa_inputs_raw, tc_inputs_raw = [], []

    # Ch√∫ng ta s·∫Ω validate sau khi b·∫•m submit; ƒë·ªÉ highlight l·ªói t·ª´ng √¥,
    # m√¨nh s·∫Ω render th√¥ng b√°o l·ªói ngay d∆∞·ªõi field (n·∫øu c√≥).
    for i in range(1, current_semester + 1):
        if (i - 1) % n_cols == 0:
            cols = st.columns(n_cols, gap="small")

        col = cols[(i - 1) % n_cols]
        with col:
            st.caption(f"K·ª≥ {i}", help=None)
            gpa_raw = st.text_input(
                f"GPA k·ª≥ {i}",
                placeholder="VD: 3.25",
                key=f"gpa_raw_{i}",
                label_visibility="visible",
            )
            tc_raw = st.text_input(
                f"T√≠n ch·ªâ k·ª≥ {i}",
                placeholder="VD: 15",
                key=f"tc_raw_{i}",
                label_visibility="visible",
            )
        gpa_inputs_raw.append(gpa_raw)
        tc_inputs_raw.append(tc_raw)

    submitted = st.form_submit_button("D·ª± ƒëo√°n")

# =============== VALIDATE ===============
if not submitted:
    st.info("ƒêi·ªÅn ƒë·∫ßy ƒë·ªß GPA v√† t√≠n ch·ªâ r·ªìi nh·∫•n 'D·ª± ƒëo√°n' ƒë·ªÉ xem k·∫øt qu·∫£.")
    st.stop()

gpa_vals, tc_vals, errors, per_field_errors = [], [], [], {}

for idx, (gpa_raw, tc_raw) in enumerate(zip(gpa_inputs_raw, tc_inputs_raw), start=1):
    gpa, err_gpa = parse_gpa(gpa_raw)
    tc,  err_tc  = parse_tc(tc_raw)

    if err_gpa:
        errors.append(f"- K·ª≥ {idx}: GPA: {err_gpa}")
        per_field_errors[f"gpa_raw_{idx}"] = err_gpa
    if err_tc:
        errors.append(f"- K·ª≥ {idx}: T√≠n ch·ªâ: {err_tc}")
        per_field_errors[f"tc_raw_{idx}"] = err_tc

    gpa_vals.append(gpa)
    tc_vals.append(tc)

# N·∫øu c√≥ l·ªói, hi·ªÉn th·ªã t·ªïng h·ª£p + g·ª£i √Ω s·ª≠a
if errors:
    st.error("‚ö†Ô∏è C√≥ l·ªói v·ªõi d·ªØ li·ªáu nh·∫≠p:\n" + "\n".join(errors))
    st.stop()

# =============== RENDER HIGHLIGHT T·∫†I CH·ªñ (sau submit) ===============
# Streamlit kh√¥ng h·ªó tr·ª£ thay ƒë·ªïi vi·ªÅn input per-widget m·ªôt c√°ch ch√≠nh th·ªëng,
# n√™n m√¨nh hi·ªÉn th·ªã l·ªói ngay d∆∞·ªõi c√°c field khi c√≥ l·ªói (ƒë√£ stop() n·∫øu c√≥ l·ªói).
# N·∫øu b·∫°n mu·ªën t√¥ ƒë·ªè label ngay khi c√≥ l·ªói m√† v·∫´n ti·∫øp t·ª•c hi·ªÉn th·ªã,
# b·ªè st.stop() ·ªü tr√™n v√† th√™m ƒëo·∫°n b√™n d∆∞·ªõi ƒë·ªÉ v·∫Ω l·ªói inline:

# for idx in range(1, current_semester + 1):
#     if f"gpa_raw_{idx}" in per_field_errors:
#         st.markdown(f"<div class='field-error'>K·ª≥ {idx} - GPA: {per_field_errors[f'gpa_raw_{idx}']}</div>", unsafe_allow_html=True)
#     if f"tc_raw_{idx}" in per_field_errors:
#         st.markdown(f"<div class='field-error'>K·ª≥ {idx} - T√≠n ch·ªâ: {per_field_errors[f'tc_raw_{idx}']}</div>", unsafe_allow_html=True)

# =============== BUILD INPUT VECTOR ===============
input_data = build_feature_vector(gpa_vals, tc_vals)

# =============== PREDICT ===============
model_prefix = "8" if student_type == "C·ª≠ nh√¢n" else "10"

# CPA t·ªët nghi·ªáp
group_key_cpa = f"GPA_TC_1_{current_semester}" if current_semester > 1 else "GPA_TC_1"
cpa_model_path = f"models_streamlit/final_cpa_{model_prefix}_ki.joblib"

try:
    cpa_dict = load_model(cpa_model_path)
    if group_key_cpa not in cpa_dict:
        st.error(f"Kh√¥ng t√¨m th·∫•y key '{group_key_cpa}' trong model CPA.")
        st.stop()
    model_cpa = cpa_dict[group_key_cpa]
    predicted_cpa = model_cpa.predict(input_data)[0]
    st.subheader("üéì D·ª± ƒëo√°n CPA t·ªët nghi·ªáp")
    st.success(f"CPA T·ªët Nghi·ªáp: {predicted_cpa:.2f}")
except FileNotFoundError as e:
    st.error(str(e)); st.stop()
except Exception as e:
    st.error(f"ƒê√£ x·∫£y ra l·ªói l√∫c d·ª± ƒëo√°n CPA: {e}"); st.stop()

# GPA k·ª≥ ti·∫øp theo (n·∫øu c√≥)
if current_semester < max_semester:
    group_key_gpa = f"GPA_{current_semester + 1}"
    next_gpa_path = f"models_streamlit/next_gpa_{model_prefix}_ki.joblib"
    try:
        next_dict = load_model(next_gpa_path)
        if group_key_gpa not in next_dict:
            st.error(f"Kh√¥ng t√¨m th·∫•y key '{group_key_gpa}' trong model GPA k·∫ø ti·∫øp.")
            st.stop()
        model_next = next_dict[group_key_gpa]
        predicted_next_gpa = model_next.predict(input_data)[0]
        st.subheader(f"üìò D·ª± ƒëo√°n GPA k·ª≥ {current_semester + 1}")
        st.info(f"GPA d·ª± ƒëo√°n: {predicted_next_gpa:.2f}")
    except FileNotFoundError as e:
        st.error(str(e))
    except Exception as e:
        st.error(f"ƒê√£ x·∫£y ra l·ªói l√∫c d·ª± ƒëo√°n GPA k·ª≥ ti·∫øp theo: {e}")

